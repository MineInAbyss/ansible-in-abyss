version: '3.2'

services:
  traefik:
    container_name: traefik
    image: "traefik:latest"
    networks:
      - traefik
    environment:
      CLOUDFLARE_EMAIL: "{{ cloudflare_email }}"
      CLOUDFLARE_DNS_API_TOKEN: "{{ cloudflare_api_key }}"
    command:
      # Tell Traefik to discover containers using the Docker API
      - --providers.docker=true
      # Set up LetsEncrypt
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.letsencrypt.acme.email={{ cloudflare_email }}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme_data/acme.json
      # Set up an insecure listener that redirects all traffic to TLS
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      # Set up the TLS configuration for our websecure listener
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=letsencrypt
      - --entrypoints.websecure.http.tls.domains[0].main={{ internal_domain_root }}
      - --entrypoints.websecure.http.tls.domains[0].sans=*.{{ internal_domain_root }}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "acme_data:/acme_data/"
    labels:
      # Router - http-catchall - redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # Middleware - redirect-to-https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # Middleware - oauth - chain verify and signin
      - "traefik.http.middlewares.oauth.chain.middlewares=oauth-signin,oauth-verify"
      # Middleware - oauth-verify - points to internal ip for oauth2proxy
      - "traefik.http.middlewares.oauth-verify.forwardauth.address=http://oauth2proxy:4180/oauth2/auth"
      - "traefik.http.middlewares.oauth-verify.forwardauth.authResponseHeaders=X-Auth-Request-Preferred-Username, X-Auth-Request-User, X-Auth-Request-Email"
      #      - "traefik.http.middlewares.oauth-verify.forwardauth.trustForwardHeader=true"
      # Middleware - oauth-signin - sign in page for oauth2proxy
      - "traefik.http.middlewares.oauth-signin.errors.service=route-authproxy@docker"
      - "traefik.http.middlewares.oauth-signin.errors.status=401"
      - "traefik.http.middlewares.oauth-signin.errors.query=/oauth2/sign_in"

  agent:
    networks:
      - traefik
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

  portainer:
    image: portainer/portainer-ce
    networks:
      - traefik
    command: -H tcp://agent:9001 --tlsskipverify
    labels:
      # Frontend
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`portainer.{{ internal_domain_root }}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=oauth@docker"
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
    volumes:
      - portainer_data:/data
  oauth2proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    networks:
      - traefik
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: '0.0.0.0:4180'
      OAUTH2_PROXY_COOKIE_SECRET: '{{ oauth2_proxy_cookie_secret }}'
      OAUTH2_PROXY_COOKIE_DOMAINS: '.{{ internal_domain_root }}' # Required so cookie can be read on all subdomains.
      OAUTH2_PROXY_WHITELIST_DOMAINS: '.{{ internal_domain_root }}' # Required to allow redirection back to original requested target.
      # Configure to use GitHub
      OAUTH2_PROXY_PROVIDER: 'github'
      OAUTH2_PROXY_CLIENT_ID: '{{ oauth2_proxy.client_id }}'
      OAUTH2_PROXY_CLIENT_SECRET: '{{ oauth2_proxy.client_secret }}'
      OAUTH2_PROXY_EMAIL_DOMAINS: '*'
      OAUTH2_PROXY_GITHUB_ORG: '{{ oauth2_proxy.github_org }}'
      OAUTH2_PROXY_GITHUB_TEAM: '{{ oauth2_proxy.github_teams }}'
      OAUTH2_PROXY_REDIRECT_URL: 'https://auth.{{ internal_domain_root }}/oauth2/callback'
      OAUTH2_PROXY_SCOPE: "user:email"

      #      OAUTH2_PROXY_COOKIE_CSRF_PER_REQUEST: "true"
      #      OAUTH2_PROXY_COOKIE_CSRF_EXPIRE: '5m'
      OAUTH2_PROXY_CUSTOM_TEMPLATES_DIR: "/templates"
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
    volumes:
      - "{{ docker_compose_dir }}/config/oauth2-proxy/templates:/templates:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.route-authproxy.rule=(Host(`auth.{{ internal_domain_root }}`) && PathPrefix(`/oauth2/`)) || (PathPrefix(`/oauth2/`))"
      - "traefik.http.services.route-authproxy.loadbalancer.server.port=4180"
volumes:
  portainer_data:
  acme_data:

networks:
  traefik:
